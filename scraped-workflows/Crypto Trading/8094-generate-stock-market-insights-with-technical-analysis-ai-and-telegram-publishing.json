{
  "id": "qYCUH4cxGizp7l1b",
  "meta": {
    "instanceId": "673dd365761c86615255caaaae908ad0f2b40ed6e6f64e1be5631254544e65ca",
    "templateCredsSetupCompleted": true
  },
  "name": "Stock Analytic Template",
  "tags": [],
  "nodes": [
    {
      "id": "1976d330-4339-4a6c-9915-f62fcb2690be",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "onError": "continueErrorOutput",
      "maxTries": 3,
      "position": [
        768,
        -432
      ],
      "parameters": {
        "text": "=–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ü–∏–∏ {{ $json.context.ticker }} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {{ $json.context.timeFrame }} –∏ —Å–æ–∑–¥–∞–π –≤–∏—Ä—É—Å–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π.\n\n–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n{{ JSON.stringify($json, null, 2) }}\n\n–°–æ–∑–¥–∞–π JSON —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –ø–æ—Å—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–∏—Å—Ç–µ–º–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.",
        "options": {
          "systemMessage": "=–†–æ–ª—å –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç\n–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–∫—Ü–∏—è–º —Å 10+ –ª–µ—Ç –æ–ø—ã—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –æ–±—ä—è—Å–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ –≤–µ—â–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏. –¢–≤–æ—è –∞—É–¥–∏—Ç–æ—Ä–∏—è ‚Äî –æ–±—ã—á–Ω—ã–µ –ª—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∞–∫—Ü–∏—è—Ö, –Ω–æ –Ω–µ —Ä–∞–∑–±–∏—Ä–∞—é—Ç—Å—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–∞—Ö.\n\n–ó–∞–¥–∞—á–∞\n–°–æ–∑–¥–∞–π –≤–∏—Ä—É—Å–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–π:\n- –ü—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ —Å –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫\n- –û–±—ä—è—Å–Ω—è–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é –±–µ–∑ –∂–∞—Ä–≥–æ–Ω–∞  \n- –î–∞–µ—Ç —á–µ—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n- –ú–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É\n\n–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞\n–í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:\n{\n  \"title\": \"–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞\",\n  \"summary\": \"–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞\"\n}\n\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ title:\nüî• –ò–Ω—Ç—Ä–∏–≥—É—é—â–∏–π —Ö—É–∫-–∑–∞–≥–æ–ª–æ–≤–æ–∫ (1 —Å—Ç—Ä–æ–∫–∞ —Å —ç–º–æ–¥–∑–∏):\n- \"üî• –ì–∞–∑–ø—Ä–æ–º –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ —Ä—ã–≤–∫—É –≤–≤–µ—Ä—Ö!\"\n- \"‚ö° –í–Ω–∏–º–∞–Ω–∏–µ! –°–±–µ—Ä –¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É\"  \n- \"üéØ –Ø–Ω–¥–µ–∫—Å: –≤—Ä–µ–º—è –≤—Ö–æ–¥–∏—Ç—å –∏–ª–∏ –ª—É—á—à–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å?\"\n\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ summary (4 –±–ª–æ–∫–∞):\n\n1. üìä –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–µ–π—á–∞—Å (2-3 —Å—Ç—Ä–æ–∫–∏)\n–ü—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º –æ–±—ä—è—Å–Ω–∏ —Ç–µ–∫—É—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é:\n- –†–∞—Å—Ç–µ—Ç/–ø–∞–¥–∞–µ—Ç/—Å—Ç–æ–∏—Ç –≤ –±–æ–∫–æ–≤–∏–∫–µ\n- –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ —Å–∏–ª—å–Ω–µ–µ/—Å–ª–∞–±–µ–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤\n- –í—ã—Å–æ–∫–∞—è/–Ω–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤\n\n2. üéØ –°–∏–≥–Ω–∞–ª—ã —Ä—ã–Ω–∫–∞ –≥–æ–≤–æ—Ä—è—Ç (3-4 —Å—Ç—Ä–æ–∫–∏)\n–ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —è–∑—ã–∫:\n\n–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:\n- RSI > 70 = \"–∞–∫—Ü–∏—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–∞\"\n- RSI < 30 = \"–∞–∫—Ü–∏—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–∞\"\n- RSI 40-60 = \"–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞\"\n- MACD bullish = \"–∏–º–ø—É–ª—å—Å –Ω–∞–±–∏—Ä–∞–µ—Ç —Å–∏–ª—É\"\n- MACD bearish = \"–∏–º–ø—É–ª—å—Å —Å–ª–∞–±–µ–µ—Ç\"\n- –¶–µ–Ω–∞ –≤—ã—à–µ SMA20 = \"–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π\"\n- EMA death cross = \"–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª\"\n- EMA golden cross = \"–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª\"\n- ADX > 25 = \"—Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥\"\n- ADX < 20 = \"—Å–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥\"\n- BB –ø–æ–∑–∏—Ü–∏—è > 0.8 = \"–≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞\"\n- BB –ø–æ–∑–∏—Ü–∏—è < 0.2 = \"–≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞\"\n\n3. üí° –ß—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –¥–ª—è –Ω–∞—Å (2-3 —Å—Ç—Ä–æ–∫–∏)\n–û–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ –∏ –∫ —á–µ–º—É –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏:\n- –ö–∞–∫–∏–µ —Ä–∏—Å–∫–∏\n- –ö–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\n- –ù–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ\n\n4. ‚ö° –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π (2-3 —Å—Ç—Ä–æ–∫–∏ + –ø—Ä–∏–∑—ã–≤)\n–ß–µ—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n- –ü–û–ö–£–ü–ê–ï–ú ‚Äî –µ—Å–ª–∏ —Å–∏–≥–Ω–∞–ª—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ\n- –ü–†–û–î–ê–ï–ú ‚Äî –µ—Å–ª–∏ –ø–æ—Ä–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å\n- –ñ–î–ï–ú ‚Äî –µ—Å–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—è –Ω–µ—è—Å–Ω–∞—è\n\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–∑—ã–≤: \"–°—Ç–∞–≤—å ‚ù§Ô∏è –µ—Å–ª–∏ –ø–æ–ª–µ–∑–Ω–æ! –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É üìà\"\n\n–°—Ç–∏–ª—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è:\n- ‚úÖ –ü—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–≤–∞ –≤–º–µ—Å—Ç–æ —Ç–µ—Ä–º–∏–Ω–æ–≤\n- ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã –∏ —ç–º–æ—Ü–∏–∏\n- ‚úÖ –ö–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n- ‚úÖ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö\n- ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏\n- ‚ùå –ù–∏–∫–∞–∫–æ–π –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ (\"–≤–æ–∑–º–æ–∂–Ω–æ\", \"–º–æ–∂–µ—Ç –±—ã—Ç—å\")\n- ‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∂–∞—Ä–≥–æ–Ω –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π\n- ‚ùå –î–ª–∏–Ω–Ω—ã–µ –∞–±–∑–∞—Ü—ã\n\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é JSON:\n- –í—Å–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã\n- –ü–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ —á–µ—Ä–µ–∑ \\n\n- –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç\n- *–ö—É—Ä—Å–∏–≤* —á–µ—Ä–µ–∑ *—Ç–µ–∫—Å—Ç*\n- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ summary: 1200 —Å–∏–º–≤–æ–ª–æ–≤\n\n–¶–µ–ª—å:\n–ß–∏—Ç–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–¥—É–º–∞—Ç—å: *\"–í–∞—É, –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ –æ–±—ä—è—Å–Ω–∏–ª! –•–æ—á—É –µ—â–µ —Ç–∞–∫—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É!\"*\n\n–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:\n{\n  \"title\": \"üî• –ì–∞–∑–ø—Ä–æ–º: –≥–æ—Ç–æ–≤–∏—Ç—Å—è –º–æ—â–Ω—ã–π —Ä—ã–≤–æ–∫ –≤–≤–µ—Ä—Ö!\",\n  \"summary\": \"üìä –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–µ–π—á–∞—Å:\\n–ì–∞–∑–ø—Ä–æ–º —Ç–æ—Ä–≥—É–µ—Ç—Å—è –≤—ã—à–µ –∫–ª—é—á–µ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω–µ–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤, –æ–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤ —Ä–∞—Å—Ç—É—Ç. –ê–∫—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Ä—ã–≤–∫–æ–º.\\n\\nüéØ –°–∏–≥–Ω–∞–ª—ã —Ä—ã–Ω–∫–∞ –≥–æ–≤–æ—Ä—è—Ç:\\n–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∏–ª—ã –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ - –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —Ä–æ—Å—Ç–∞. –ò–º–ø—É–ª—å—Å –Ω–∞–±–∏—Ä–∞–µ—Ç —Å–∏–ª—É, –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π. –ê–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.\\n\\nüí° –ß—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –¥–ª—è –Ω–∞—Å:\\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –≤—ã—Å–æ–∫—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–æ—Å—Ç–∞. –•–æ—Ä–æ—à–∏–π –º–æ–º–µ–Ω—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é. –†–∏—Å–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã —Ç–µ–∫—É—â–∏–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\\n\\n‚ö° –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:\\n–ü–û–ö–£–ü–ê–ï–ú ‚Äî –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã –∑–µ–ª–µ–Ω—ã–µ, —Ç—Ä–µ–Ω–¥ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–æ—Å—Ç. –¶–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å 140-145 —Ä—É–±–ª–µ–π –∑–∞ –∞–∫—Ü–∏—é.\\n\\n–°—Ç–∞–≤—å ‚ù§Ô∏è –µ—Å–ª–∏ –ø–æ–ª–µ–∑–Ω–æ! –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –∫–∞–Ω–∞–ª üìà\"\n}\n\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ:\n- –û—Ç–≤–µ—Ç ‚Äî —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON-–æ–±—ä–µ–∫—Ç —Å—Ç—Ä–æ–≥–æ —ç—Ç–æ–≥–æ –≤–∏–¥–∞:\n{\"title\": \"string\", \"summary\": \"string\"}. \n- –ë–µ–∑ –∫–æ–¥–∞, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –≤–Ω–µ JSON. \n- –ü–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ ‚Äî \\n. \n- –ö–∞–≤—ã—á–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫ ‚Äî —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.\n- –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON\n- –ù–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤–Ω–µ JSON\n- –í—Å–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π —è–∑—ã–∫\n- –ß–µ—Ç–∫–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∫ –¥–µ–π—Å—Ç–≤–∏—é –≤ –∫–æ–Ω—Ü–µ"
        },
        "promptType": "define",
        "hasOutputParser": true
      },
      "retryOnFail": true,
      "typeVersion": 2.2
    },
    {
      "id": "bf94369a-e36d-460e-903e-2c78a428291d",
      "name": "OpenRouter Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "position": [
        736,
        -64
      ],
      "parameters": {
        "model": "openai/gpt-oss-120b",
        "options": {}
      },
      "credentials": {
        "openRouterApi": {
          "id": "ONSHmBroionT6JFr",
          "name": "OpenRouter account"
        }
      },
      "typeVersion": 1
    },
    {
      "id": "8affe1e1-06bb-49ab-bead-95e6de0696f8",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -192,
        -432
      ],
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 11,
              "triggerAtMinute": 15
            },
            {
              "triggerAtHour": 18,
              "triggerAtMinute": 15
            }
          ]
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "2843ee64-77b1-40ad-927c-742786ecd60e",
      "name": "Execute Auth Login",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        880,
        -704
      ],
      "parameters": {
        "options": {},
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "gz5RhsAPZztWijnP",
          "cachedResultName": "BCS Login"
        },
        "workflowInputs": {
          "value": {},
          "schema": [
            {
              "id": "s",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "s",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [
            "s"
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "95946c93-adc2-48e5-b7d8-3413551c694a",
      "name": "Execute Auth Trade API",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        208,
        -432
      ],
      "parameters": {
        "options": {},
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "e4nUcFlYhUsQcGi8",
          "cachedResultName": "Trade API Auth"
        },
        "workflowInputs": {
          "value": {
            "ticker": "={{ $json.ticker }}",
            "classCode": "={{ $json.classCode }}"
          },
          "schema": [
            {
              "id": "ticker",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "ticker",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "classCode",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "classCode",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [
            "s"
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "4555c391-af96-4600-9d27-5df6e60489f0",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "position": [
        -192,
        -672
      ],
      "webhookId": "2afb4bc6-f907-44db-8c34-3796bdbef16d",
      "parameters": {
        "updates": [
          "callback_query"
        ],
        "additionalFields": {}
      },
      "credentials": {
        "telegramApi": {
          "id": "D0iu3DKnOelSnEgy",
          "name": "BCS Stocks Analytic Bot"
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "86148c42-ccfd-4565-b32c-b9316bc38ee8",
      "name": "–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
      "type": "n8n-nodes-base.telegram",
      "position": [
        1248,
        -608
      ],
      "webhookId": "10e290b2-964a-478b-890f-b1acc63289e3",
      "parameters": {
        "text": "–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
        "chatId": "{ admin_chat_id }",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "credentials": {
        "telegramApi": {
          "id": "D0iu3DKnOelSnEgy",
          "name": "BCS Stocks Analytic Bot"
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "3475bd7c-edd8-4bc5-9a7c-40c2ca16bff5",
      "name": "–£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ",
      "type": "n8n-nodes-base.telegram",
      "position": [
        1248,
        -768
      ],
      "webhookId": "6fc8899d-de7a-4f27-8a68-e63b1e4744f6",
      "parameters": {
        "text": "–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞–Ω",
        "chatId": "{ admin_chat_id }",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "credentials": {
        "telegramApi": {
          "id": "D0iu3DKnOelSnEgy",
          "name": "BCS Stocks Analytic Bot"
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "b59a7aa8-ec1c-44e2-88ef-dd945631864e",
      "name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "position": [
        864,
        -208
      ],
      "parameters": {
        "autoFix": true,
        "schemaType": "manual",
        "inputSchema": "{\n  \"title\": \"string\",\n  \"summary\": \"string\"\n}"
      },
      "typeVersion": 1.3
    },
    {
      "id": "e8f8b5c4-f4a3-492d-a78a-ac34261a8b94",
      "name": "Get Action Type",
      "type": "n8n-nodes-base.set",
      "position": [
        -16,
        -672
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "ccf9b9b2-6b12-4bf7-9b35-7f2b70a49e40",
              "name": "action",
              "type": "string",
              "value": "={{ $json.callback_query.data.split('::')[0] }}"
            },
            {
              "id": "52ee0570-ed4c-4d3a-bc79-ed2589db5cae",
              "name": "id",
              "type": "string",
              "value": "={{ $json.callback_query.data.split('::')[1] }}"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "fc7a86db-af8b-4201-a794-7dd60bf5e14e",
      "name": "Exist type and id",
      "type": "n8n-nodes-base.if",
      "position": [
        160,
        -672
      ],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "ca9eaef8-3da9-477c-a782-e7f4f2f7452f",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              },
              "leftValue": "={{ $json.action }}",
              "rightValue": ""
            },
            {
              "id": "abaf219d-a434-484b-85e6-854f2f78481d",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              },
              "leftValue": "={{ $json.id }}",
              "rightValue": ""
            }
          ]
        }
      },
      "typeVersion": 2.2
    },
    {
      "id": "153d877b-6ada-482d-acf9-141cc5e18776",
      "name": "Get Post By Id",
      "type": "n8n-nodes-base.postgres",
      "position": [
        352,
        -688
      ],
      "parameters": {
        "limit": 1,
        "table": {
          "__rl": true,
          "mode": "list",
          "value": "analytics_history",
          "cachedResultName": "analytics_history"
        },
        "where": {
          "values": [
            {
              "value": "={{ $json.id }}",
              "column": "id"
            }
          ]
        },
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "options": {},
        "operation": "select"
      },
      "credentials": {
        "postgres": {
          "id": "PTf5S1iOgi9b8JPE",
          "name": "Postgres bcs_analytic_bot"
        }
      },
      "typeVersion": 2.6
    },
    {
      "id": "86b0748f-c556-4979-a69f-9156d6085f2e",
      "name": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
      "type": "n8n-nodes-base.telegram",
      "position": [
        1184,
        -208
      ],
      "webhookId": "75d3e05e-14f4-4316-85cf-dc36c59265da",
      "parameters": {
        "text": "=–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ ticker: {{ $json.context.ticker }}",
        "chatId": "{ admin_chat_id }",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "credentials": {
        "telegramApi": {
          "id": "D0iu3DKnOelSnEgy",
          "name": "BCS Stocks Analytic Bot"
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "00861c84-cad2-4822-8378-e37c7d07f5f5",
      "name": "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ",
      "type": "n8n-nodes-base.httpRequest",
      "maxTries": 2,
      "position": [
        400,
        -432
      ],
      "parameters": {
        "url": "https://be.broker.ru/trade-api-market-data-connector/api/v1/candles-chart",
        "options": {},
        "sendQuery": true,
        "sendHeaders": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "ticker",
              "value": "={{ $('–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—Ç—É—Ç —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è ticker)').item.json.ticker }}"
            },
            {
              "name": "classCode",
              "value": "={{ $('–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—Ç—É—Ç —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è ticker)').item.json.classCode }}"
            },
            {
              "name": "timeFrame",
              "value": "H1"
            },
            {
              "name": "startDate",
              "value": "={{new Date(Date.now() - 24 * 60 * 60 * 1000 * 60).toISOString()}}"
            },
            {
              "name": "endDate",
              "value": "={{new Date().toISOString()}}"
            }
          ]
        },
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Execute Auth Trade API').item.json.access_token }}"
            }
          ]
        }
      },
      "retryOnFail": true,
      "typeVersion": 4.1,
      "alwaysOutputData": true
    },
    {
      "id": "0258bea4-7914-4fd3-8161-52dc5a1ee4fd",
      "name": "–†–∞—Å—Å—á–µ—Ç TA",
      "type": "n8n-nodes-base.code",
      "position": [
        592,
        -432
      ],
      "parameters": {
        "jsCode": "// ===== Compact TA for multi-ticker =====\n// Input options:\n//  A) multiple items: [{ json: { ticker, classCode, timeFrame, bars: [...] } }, ...]\n//  B) single item with batch: { json: { batch: [{ticker, classCode, timeFrame, bars:[...]}] } }\n//  C) single item with dict:  { json: { barsByTicker: { TICKER: [...], ... }, classCode, timeFrame } }\n//\n// Output: one item per ticker: { context, last, derived }\n\nconst PERIOD_RSI = 14;\nconst BB_PERIOD = 20, BB_K = 2.0;\nconst SMA_PERIOD = 20;\nconst EMA_FAST = 50, EMA_SLOW = 200;\nconst MACD_FAST = 12, MACD_SLOW = 26, MACD_SIGNAL = 9;\nconst ADX_PERIOD = 14;\n\n// ---------- helpers ----------\nfunction num(x){ const n = Number(x); return Number.isFinite(n) ? n : NaN; }\nfunction sma(arr, p){\n  const out = new Array(arr.length).fill(null); let s=0;\n  for(let i=0;i<arr.length;i++){ s+=arr[i]; if(i>=p) s-=arr[i-p]; if(i>=p-1) out[i]=s/p; }\n  return out;\n}\nfunction ema(arr, p){\n  const out=new Array(arr.length).fill(null); const k=2/(p+1);\n  let s=0; for(let i=0;i<p;i++) s+=arr[i]; let prev=s/p; out[p-1]=prev;\n  for(let i=p;i<arr.length;i++){ prev=arr[i]*k + prev*(1-k); out[i]=prev; }\n  return out;\n}\nfunction rollingStd(arr,p){\n  const out=new Array(arr.length).fill(null);\n  for(let i=p-1;i<arr.length;i++){\n    const sl=arr.slice(i-p+1,i+1);\n    const m=sl.reduce((a,b)=>a+b,0)/sl.length;\n    const v=sl.reduce((a,b)=>a+(b-m)*(b-m),0)/sl.length;\n    out[i]=Math.sqrt(v);\n  }\n  return out;\n}\nfunction rsi(arr,p=14){\n  const out=new Array(arr.length).fill(null); let g=0,l=0;\n  for(let i=1;i<=p;i++){ const ch=arr[i]-arr[i-1]; if(ch>0) g+=ch; else l-=ch; }\n  let avgG=g/p, avgL=l/p; out[p]=100 - (100/(1 + (avgL===0?Infinity:avgG/avgL)));\n  for(let i=p+1;i<arr.length;i++){\n    const ch=arr[i]-arr[i-1], gain=Math.max(ch,0), loss=Math.max(-ch,0);\n    avgG=(avgG*(p-1)+gain)/p; avgL=(avgL*(p-1)+loss)/p;\n    out[i]=100 - (100/(1 + (avgL===0?Infinity:avgG/avgL)));\n  }\n  return out;\n}\nfunction wilder(arr,p){\n  const out=new Array(arr.length).fill(null); let s=0;\n  for(let i=0;i<p;i++) s+=arr[i]||0; let prev=s/p; out[p-1]=prev; const a=1/p;\n  for(let i=p;i<arr.length;i++){ prev=prev + a*((arr[i]||0)-prev); out[i]=prev; }\n  return out;\n}\nfunction tr(h,l,pc){ return Math.max(h-l, Math.abs(h-pc), Math.abs(l-pc)); }\nfunction adx(highs,lows,closes,p=14){\n  const len=closes.length, TR=new Array(len).fill(null), plusDM=new Array(len).fill(null), minusDM=new Array(len).fill(null);\n  for(let i=1;i<len;i++){\n    const up=highs[i]-highs[i-1], dn=lows[i-1]-lows[i];\n    plusDM[i]=(up>dn && up>0)?up:0; minusDM[i]=(dn>up && dn>0)?dn:0; TR[i]=tr(highs[i],lows[i],closes[i-1]);\n  }\n  const ATR=wilder(TR.map(v=>v??0),p);\n  const plusDI=wilder(plusDM.map(v=>v??0),p).map((v,i)=> ATR[i]?100*v/ATR[i]:null);\n  const minusDI=wilder(minusDM.map(v=>v??0),p).map((v,i)=> ATR[i]?100*v/ATR[i]:null);\n  const DX=plusDI.map((pdi,i)=> (pdi!=null && minusDI[i]!=null && (pdi+minusDI[i])!==0)? 100*Math.abs(pdi-minusDI[i])/(pdi+minusDI[i]) : null);\n  const ADX=wilder(DX.map(v=>v??0),p);\n  return { plusDI, minusDI, ADX };\n}\nfunction clamp01(x){ return Math.max(0, Math.min(1, x)); }\n\n// ---------- core compute for single ticker ----------\nfunction computeOne(meta){\n  const raw = Array.isArray(meta.bars) ? meta.bars : [];\n  if (raw.length < 30) {\n    return {\n      error: true,\n      payload: { context: { ticker: meta.ticker ?? null }, message: \"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞—Ä–æ–≤ (–Ω—É–∂–Ω–æ >= 30)\" }\n    };\n  }\n\n  // sort asc & normalize\n  const bars = raw.slice().sort((a,b)=> new Date(a.time) - new Date(b.time))\n    .map(b=>({\n      time:String(b.time),\n      open:num(b.open), high:num(b.high), low:num(b.low), close:num(b.close), volume:num(b.volume)\n    }));\n\n  const N = bars.length;\n  const closes = bars.map(b=>b.close), highs = bars.map(b=>b.high), lows = bars.map(b=>b.low);\n\n  // series\n  const rsi14 = rsi(closes, PERIOD_RSI);\n  const sma20 = sma(closes, SMA_PERIOD);\n  const ema50 = ema(closes, EMA_FAST);\n  const ema200 = ema(closes, EMA_SLOW);\n\n  const ema12 = ema(closes, MACD_FAST);\n  const ema26 = ema(closes, MACD_SLOW);\n  const macdLine = closes.map((_,i)=> (ema12[i]!=null && ema26[i]!=null) ? ema12[i]-ema26[i] : null);\n  const macdForSignal = macdLine.map(v=> v==null ? 0 : v);\n  const macdSignalCore = ema(macdForSignal.filter((_,i)=> macdLine[i]!=null), MACD_SIGNAL);\n  let si=0; const macdSignal = macdLine.map(v=> v!=null ? macdSignalCore[si++] : null);\n  const macdHist = macdLine.map((v,i)=> (v!=null && macdSignal[i]!=null) ? v - macdSignal[i] : null);\n\n  const bbMid = sma20;\n  const bbStd = rollingStd(closes, BB_PERIOD);\n  const bbUpper = bbMid.map((m,i)=> m!=null ? m + BB_K*bbStd[i] : null);\n  const bbLower = bbMid.map((m,i)=> m!=null ? m - BB_K*bbStd[i] : null);\n\n  const { plusDI, minusDI, ADX } = adx(highs, lows, closes, ADX_PERIOD);\n\n  // last\n  const i = N - 1;\n  const price = closes[i];\n  const last = {\n    price,\n    rsi14: rsi14[i],\n    macd: macdLine[i],\n    macdSignal: macdSignal[i],\n    macdHist: macdHist[i],\n    bbUpper: bbUpper[i],\n    bbMid: bbMid[i],\n    bbLower: bbLower[i],\n    sma20: sma20[i],\n    ema50: ema50[i],\n    ema200: ema200[i],\n    adx14: ADX[i],\n    plusDI: plusDI[i],\n    minusDI: minusDI[i],\n  };\n\n  const derived = {\n    priceAboveSma20: (price!=null && last.sma20!=null) ? (price > last.sma20) : null,\n    emaCross: (last.ema50!=null && last.ema200!=null) ? (last.ema50>last.ema200 ? \"golden\" : last.ema50<last.ema200 ? \"death\" : \"flat\") : null,\n    macdBias: (last.macd!=null && last.macdSignal!=null) ? (last.macd > last.macdSignal ? \"bullish\" : \"bearish\") : null,\n    trendStrength: (last.adx14==null) ? null : (last.adx14<20 ? \"weak\" : last.adx14<40 ? \"moderate\" : \"strong\"),\n    bbPos01: (last.bbUpper!=null && last.bbLower!=null && price!=null) ? clamp01((price - last.bbLower) / (last.bbUpper - last.bbLower)) : null,\n  };\n\n  const context = {\n    ticker: meta.ticker ?? null,\n    classCode: meta.classCode ?? null,\n    timeFrame: meta.timeFrame ?? \"H1\",\n    end: bars[N-1].time\n  };\n\n  return { error:false, payload:{ context, last, derived } };\n}\n\n// ---------- gather inputs ----------\nconst inputs = $input.all();   // A) multiple items case\n\nlet jobs = [];\n\n// A) multiple items with per-ticker bars\nif (inputs.length > 1 || (inputs[0]?.json?.bars && inputs[0]?.json?.ticker)) {\n  jobs = inputs.map(it => ({ ticker: it.json.ticker, meta: it.json }));\n}\n// B) single item with batch: meta.batch = [{ticker, bars, ...}, ...]\nelse if (Array.isArray(inputs[0]?.json?.batch)) {\n  jobs = inputs[0].json.batch.map(x => ({ ticker: x.ticker, meta: x }));\n}\n// C) single item with dict: meta.barsByTicker = { TICK1:[...], TICK2:[...] }\nelse if (inputs[0]?.json?.barsByTicker && typeof inputs[0].json.barsByTicker === 'object') {\n  const common = { classCode: inputs[0].json.classCode, timeFrame: inputs[0].json.timeFrame };\n  jobs = Object.entries(inputs[0].json.barsByTicker).map(([ticker, bars]) => ({\n    ticker,\n    meta: { ...common, ticker, bars }\n  }));\n}\n// fallback: single standard item\nelse {\n  jobs = [{ ticker: inputs[0]?.json?.ticker ?? null, meta: inputs[0]?.json ?? {} }];\n}\n\n// ---------- compute and return one item per ticker ----------\nconst out = [];\nfor (const { meta } of jobs) {\n  const res = computeOne(meta);\n  if (res.error) {\n    out.push({ json: { error: res.payload.message || \"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞—Ä–æ–≤ (–Ω—É–∂–Ω–æ >= 30)\", context: { ticker: meta.ticker ?? null } } });\n  } else {\n    out.push({ json: res.payload });\n  }\n}\n\nreturn out;\n"
      },
      "typeVersion": 2
    },
    {
      "id": "f721ec3f-c629-4045-b80d-786e78fc6672",
      "name": "ID Generation",
      "type": "n8n-nodes-base.crypto",
      "position": [
        1072,
        -432
      ],
      "parameters": {
        "action": "generate"
      },
      "typeVersion": 1
    },
    {
      "id": "a5271f93-d5da-4e12-832d-de52d5c96dbe",
      "name": "–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é",
      "type": "n8n-nodes-base.telegram",
      "onError": "continueErrorOutput",
      "position": [
        1424,
        -432
      ],
      "webhookId": "e010c79b-c1fe-42c4-a7e9-0212755ec9e9",
      "parameters": {
        "text": "={{ $json.title }}\n\n{{ $json.summary }}",
        "chatId": "={ admin_chat_id }",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å",
                    "additionalFields": {
                      "callback_data": "=publish::{{ $('ID Generation').item.json.data }}"
                    }
                  },
                  {
                    "text": "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å",
                    "additionalFields": {
                      "callback_data": "=retry::{{ $('ID Generation').item.json.data }}"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "credentials": {
        "telegramApi": {
          "id": "D0iu3DKnOelSnEgy",
          "name": "BCS Stocks Analytic Bot"
        }
      },
      "executeOnce": false,
      "typeVersion": 1.2,
      "alwaysOutputData": false
    },
    {
      "id": "bbdaca8b-ced8-4531-99e0-88af94944352",
      "name": "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞–≤ –≤ –ü—Ä–æ—Ñ–∏—Ç–µ",
      "type": "n8n-nodes-base.httpRequest",
      "onError": "continueErrorOutput",
      "position": [
        1056,
        -704
      ],
      "parameters": {
        "url": "https://my.broker.ru/web/api/v2/newsfeed/posts",
        "method": "POST",
        "options": {
          "redirect": {
            "redirect": {}
          }
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "sendHeaders": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "body",
              "value": "={{ $('–°–æ–±–∏—Ä–∞–µ–º –ø–æ—Å—Ç').item.json.post.toJsonString() }}"
            }
          ]
        },
        "headerParameters": {
          "parameters": [
            {
              "name": "authorization",
              "value": "=Bearer {{ $json.access_token }}"
            }
          ]
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "0b8c343a-567d-45b3-8883-9abe03a34b77",
      "name": "–†–∞–∑–≤–∏–ª–∫–∞",
      "type": "n8n-nodes-base.switch",
      "position": [
        528,
        -688
      ],
      "parameters": {
        "rules": {
          "values": [
            {
              "outputKey": "publish",
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "6705dbe2-66e4-4768-9400-e1de6d63b9d5",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    },
                    "leftValue": "={{ $('Get Action Type').item.json.action }}",
                    "rightValue": "publish"
                  }
                ]
              },
              "renameOutput": true
            },
            {
              "outputKey": "retry",
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "1d8c2bca-9762-4ee0-ad6b-a3f564e0103d",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    },
                    "leftValue": "={{ $('Get Action Type').item.json.action }}",
                    "rightValue": "retry"
                  }
                ]
              },
              "renameOutput": true
            }
          ]
        },
        "options": {}
      },
      "typeVersion": 3.2
    },
    {
      "id": "40f72a3f-9d40-4319-857a-3372b41732fc",
      "name": "–°–æ–±–∏—Ä–∞–µ–º –ø–æ—Å—Ç",
      "type": "n8n-nodes-base.code",
      "position": [
        704,
        -704
      ],
      "parameters": {
        "jsCode": "const ticker = $input.first().json.ticker\nconst classCode = $input.first().json.classCode\nconst title = $input.first().json.title\nconst text = $input.first().json.summary\n\nconst post = {\n  title: title,\n  content: `${text}\\n#–¢–µ—Ö–∞–Ω–∞–ª–∏–∑ {$${ticker}}`,\n  filesInfo: [],\n  instruments: [{ securityCode: ticker, classCode: classCode }],\n  profiles: [],\n  tags: ['–¢–µ—Ö–∞–Ω–∞–ª–∏–∑'],\n  strategies: []\n};\n\nreturn [{ json: { post } }];\n"
      },
      "typeVersion": 2
    },
    {
      "id": "3a1e1f0f-2b19-4f3e-8ef2-7ff5c1208253",
      "name": "Send a text message",
      "type": "n8n-nodes-base.telegram",
      "position": [
        1632,
        -336
      ],
      "webhookId": "4101afc1-522e-4451-b96f-a3767f26d378",
      "parameters": {
        "text": "=–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ {{ $json.ticker }} - {{ $json.error }}",
        "chatId": "{ admin_chat_id }",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å",
                    "additionalFields": {
                      "callback_data": "=retry::{{ $('ID Generation').item.json.data }}"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "credentials": {
        "telegramApi": {
          "id": "D0iu3DKnOelSnEgy",
          "name": "BCS Stocks Analytic Bot"
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "a332ec95-1e1a-44e1-9e2d-1c3ad24dcde5",
      "name": "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞",
      "type": "n8n-nodes-base.postgres",
      "position": [
        1248,
        -432
      ],
      "parameters": {
        "table": {
          "__rl": true,
          "mode": "list",
          "value": "analytics_history",
          "cachedResultName": "analytics_history"
        },
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public",
          "cachedResultName": "public"
        },
        "columns": {
          "value": {
            "id": "={{ $json.data }}",
            "title": "={{ $('AI Agent').item.json.output.title }}",
            "ticker": "={{ $('–†–∞—Å—Å—á–µ—Ç TA').item.json.context.ticker }}",
            "summary": "={{ $('AI Agent').item.json.output.summary }}",
            "classCode": "={{ $('–†–∞—Å—Å—á–µ—Ç TA').item.json.context.classCode }}"
          },
          "schema": [
            {
              "id": "id",
              "type": "string",
              "display": true,
              "required": true,
              "displayName": "id",
              "defaultMatch": true,
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "type": "dateTime",
              "display": true,
              "required": false,
              "displayName": "created_at",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "summary",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "summary",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "ticker",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "ticker",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "classCode",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "classCode",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "title",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "title",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [
            "id"
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "credentials": {
        "postgres": {
          "id": "PTf5S1iOgi9b8JPE",
          "name": "Postgres bcs_analytic_bot"
        }
      },
      "typeVersion": 2.6
    },
    {
      "id": "cedff92e-feb3-403c-be04-f7fd74ad7fcb",
      "name": "–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—Ç—É—Ç —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è ticker)",
      "type": "n8n-nodes-base.code",
      "position": [
        0,
        -432
      ],
      "parameters": {
        "jsCode": "const data = $input.first()?.json;\n\nconst defaultTickers = [ \n  { ticker: \"GAZP\", classCode: \"TQBR\" }, \n  { ticker: \"SBER\", classCode: \"TQBR\" },\n  { ticker: \"LKOH\", classCode: \"TQBR\" }\n];\n\n// –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å ticker –∏ classCode - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö, –∏–Ω–∞—á–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ\nconst result = (data?.ticker && data?.classCode) \n  ? [{ ticker: data.ticker, classCode: data.classCode }]\n  : defaultTickers;\n\nreturn result.map(item => ({ json: item }));"
      },
      "typeVersion": 2
    },
    {
      "id": "76608d62-aef1-4fa2-b1cd-3bbd03b6b1b9",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -992,
        -784
      ],
      "parameters": {
        "color": 5,
        "width": 700,
        "height": 924,
        "content": "# üìà AI Stock Analytics & BCS \"Profit\" Social Network Publishing Workflow  \n\nThis workflow automatically generates stock market insights for selected tickers (e.g. GAZP, SBER, LKOH) using historical data, technical indicators, and an AI model. The results are then sent to Telegram for quick moderation and publishing.  \n\n## üîë What this workflow does\n- **Runs twice a day** on a schedule with a predefined list of tickers.  \n- **Fetches historical market data** from a broker API.  \n- **Calculates key technical indicators** (RSI, EMA/SMA, MACD, Bollinger Bands, ADX).  \n- **Generates an investment post** (title + summary) using an LLM.  \n- **Stores results** in a PostgreSQL database.  \n- **Sends a draft post to Telegram** with inline buttons *‚ÄúPublish‚Äù* and *‚ÄúRetry‚Äù*.  \n- **Handles Telegram actions**: publishes the post to the final channel or re-runs the generation process.  \n\n## üìå Key features\n- Multi-ticker support in a single run.  \n- Automatic error handling (e.g. missing data or invalid AI JSON output).  \n- Human-in-the-loop moderation through Telegram before publishing.  \n- PostgreSQL integration for history and analytics storage.  \n- Flexible structure: easy to extend with new tickers, indicators, or publishing channels.  \n\n## üõ†Ô∏è Nodes used\n- **Trigger:** Schedule (twice daily) + Telegram Trigger (button callbacks).  \n- **Data:** HTTP Request (broker API), Function (technical analysis calculations).  \n- **AI:** OpenAI / OpenRouter with structured JSON output.  \n- **Storage:** PostgreSQL (analytics history).  \n- **Messaging:** Telegram (drafts and publishing).  \n\n## üöÄ Who is this for\n- Fintech startups looking to automate market content.  \n- Investment bloggers posting daily stock analysis.  \n- Analysts experimenting with trading strategies on real market data.  \n"
      },
      "typeVersion": 1
    },
    {
      "id": "a42b6f27-bdd6-412a-96b5-d8d3b2ca6271",
      "name": "Query callback",
      "type": "n8n-nodes-base.telegram",
      "position": [
        -16,
        -832
      ],
      "webhookId": "57da57bf-7944-481d-a39d-b52db04c7b76",
      "parameters": {
        "queryId": "={{ $json.callback_query.id }}",
        "resource": "callback",
        "additionalFields": {}
      },
      "credentials": {
        "telegramApi": {
          "id": "D0iu3DKnOelSnEgy",
          "name": "BCS Stocks Analytic Bot"
        }
      },
      "typeVersion": 1.2
    }
  ],
  "active": false,
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "55d6ca44-7fdd-4132-a10a-85d2b67eb554",
  "connections": {
    "AI Agent": {
      "main": [
        [
          {
            "node": "ID Generation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ID Generation": {
      "main": [
        [
          {
            "node": "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Post By Id": {
      "main": [
        [
          {
            "node": "–†–∞–∑–≤–∏–ª–∫–∞",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Action Type": {
      "main": [
        [
          {
            "node": "Exist type and id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—Ç—É—Ç —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è ticker)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Get Action Type",
            "type": "main",
            "index": 0
          },
          {
            "node": "Query callback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–†–∞–∑–≤–∏–ª–∫–∞": {
      "main": [
        [
          {
            "node": "–°–æ–±–∏—Ä–∞–µ–º –ø–æ—Å—Ç",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—Ç—É—Ç —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è ticker)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Exist type and id": {
      "main": [
        [
          {
            "node": "Get Post By Id",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–†–∞—Å—Å—á–µ—Ç TA": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Auth Login": {
      "main": [
        [
          {
            "node": "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞–≤ –≤ –ü—Ä–æ—Ñ–∏—Ç–µ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Execute Auth Trade API": {
      "main": [
        [
          {
            "node": "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "–°–æ–±–∏—Ä–∞–µ–º –ø–æ—Å—Ç": {
      "main": [
        [
          {
            "node": "Execute Auth Login",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞": {
      "main": [
        [
          {
            "node": "–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ": {
      "main": [
        [
          {
            "node": "–†–∞—Å—Å—á–µ—Ç TA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é": {
      "main": [
        [],
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞–≤ –≤ –ü—Ä–æ—Ñ–∏—Ç–µ": {
      "main": [
        [
          {
            "node": "–£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—Ç—É—Ç —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è ticker)": {
      "main": [
        [
          {
            "node": "Execute Auth Trade API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}